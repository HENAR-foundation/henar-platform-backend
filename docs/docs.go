// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/projects/cancel/{id}": {
            "get": {
                "description": "Cancels the user's application for the specified project.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Cancel project application",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Project"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or project ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error connecting to database or updating/retrieving project",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/projects/respond/{id}": {
            "get": {
                "description": "Adds the current user as an applicant to the specified project.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Respond to a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Project"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or project ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error connecting to database or updating/retrieving project",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Creates a new user in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "responses": {
                    "201": {
                        "description": "The created user",
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/approve-contacts-request/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Approves a contact request from the specified user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Approve contact request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Done",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID or user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error connecting to database or updating user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/approve/{id}": {
            "get": {
                "description": "Approves a project request for the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Approve project request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request approved successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID or user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error connecting to database or updating user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/reject-contacts-request/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Rejects a contact request from the specified user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Reject contact request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Done",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID or user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error connecting to database or updating user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/reject/{id}": {
            "get": {
                "description": "Rejects a project request for the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Reject project request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request rejected successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID or user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error connecting to database or updating user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/request-contacts/{id}": {
            "post": {
                "description": "Sends a contact request to the specified user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Send contact request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RequestMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact request added successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID or user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error connecting to database or updating user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/update-password": {
            "patch": {
                "description": "Updates the password for a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password successfully updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error parsing request body or validating user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Wrong credentials",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Permission or ownership error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error connecting to database or updating user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "patch": {
                "description": "Updates an existing user in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update an existing user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UserBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/events": {
            "get": {
                "description": "Retrieves all events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get all events",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of sort fields and directions, e.g. views,-applicants,tags",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Language code for the title (default 'en')",
                        "name": "language",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Substring to match in the title",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of tag IDs to filter by",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Location ID to filter by",
                        "name": "location",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Event"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Create event",
                "parameters": [
                    {
                        "description": "Event Object",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Event"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.Event"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/events/{id}": {
            "delete": {
                "description": "Deletes a event document by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Delete event by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting event: \u003cerror message\u003e",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a event by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Update event by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Event Object",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Event"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Event"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/events/{slug}": {
            "get": {
                "description": "Retrieves a event by its slug",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get event by slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Event"
                        }
                    },
                    "400": {
                        "description": "Invalid slug",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/files/upload": {
            "post": {
                "description": "Upload a static file to Henar DigitalOcean failopoika's and get the uri",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Upload file",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.FileResponce"
                            }
                        }
                    },
                    "400": {
                        "description": "error reading file",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/locations": {
            "get": {
                "description": "Retrieves all locations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Get all locations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Location"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new research",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Create research",
                "parameters": [
                    {
                        "description": "Location Object",
                        "name": "research",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Location"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.Location"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/locations/suggestions": {
            "get": {
                "description": "Returns a list of suggested addresses based on a query string.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Get Location Suggestions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Query string for location suggestions",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Language of response",
                        "name": "lanquage",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Suggestions"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/locations/{id}": {
            "delete": {
                "description": "Deletes a research document by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Delete research by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Location deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Location not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting research: \u003cerror message\u003e",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a research by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Update research by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Location Object",
                        "name": "research",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Location"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Location"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/locations/{slug}": {
            "get": {
                "description": "Retrieves a research by its slug",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Get research by slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Location"
                        }
                    },
                    "400": {
                        "description": "Invalid slug",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Location not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/projects": {
            "get": {
                "description": "Retrieves a list of all projects in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get all projects",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of sort fields and directions, e.g. views,-applicants,tags",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Language code for the title (default 'en')",
                        "name": "language",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Substring to match in the title",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of tag IDs to filter by",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Location ID to filter by",
                        "name": "location",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Project statuses",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "How to help the project",
                        "name": "help",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Project"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new project in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Create a project",
                "parameters": [
                    {
                        "description": "Project",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Project"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.Project"
                        }
                    },
                    "400": {
                        "description": "Error parsing request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/projects/{id}": {
            "delete": {
                "description": "Deletes a project from the database based on the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Delete a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates an existing project in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Update a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Project"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Invalid ID or error parsing request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/projects/{slug}": {
            "get": {
                "description": "Retrieves a project by its slug and increments its view count.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get a project by slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Project"
                        }
                    },
                    "400": {
                        "description": "Invalid slug",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/researches": {
            "get": {
                "description": "Retrieves all researches",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "researches"
                ],
                "summary": "Get all researches",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of sort fields and directions, e.g. views,-applicants,tags",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Language code for the title (default 'en')",
                        "name": "language",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Substring to match in the title",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of tag IDs to filter by",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Location ID to filter by",
                        "name": "location",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Research"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new research",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "researches"
                ],
                "summary": "Create research",
                "parameters": [
                    {
                        "description": "Research Object",
                        "name": "research",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Research"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.Research"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/researches/{id}": {
            "delete": {
                "description": "Deletes a research document by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "researches"
                ],
                "summary": "Delete research by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Research ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Research deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Research not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting research: \u003cerror message\u003e",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a research by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "researches"
                ],
                "summary": "Update research by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Research ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Research Object",
                        "name": "research",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Research"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Research"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/researches/{slug}": {
            "get": {
                "description": "Retrieves a research by its slug",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "researches"
                ],
                "summary": "Get research by slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Research slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Research"
                        }
                    },
                    "400": {
                        "description": "Invalid slug",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Research not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/statistics": {
            "get": {
                "description": "Retrieves all statistics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "Get all statistics",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Statistic"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new statistic",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "Create statistic",
                "parameters": [
                    {
                        "description": "Statistic Object",
                        "name": "statistic",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Statistic"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.Statistic"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/statistics/{id}": {
            "get": {
                "description": "Retrieves a statistic by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "Get statistic by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Statistic ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Statistic"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Statistic not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a statistic document by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "Delete statistic by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Statistic ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Statistic deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Statistic not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting statistic: \u003cerror message\u003e",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a statistic by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "Update statistic by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Statistic ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Statistic Object",
                        "name": "statistic",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Statistic"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Statistic"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/tags": {
            "get": {
                "description": "Retrieves a list of all tags in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Get all tags",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Tag"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new tag in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Create a new tag",
                "parameters": [
                    {
                        "description": "Tag object to create",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Tag"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created tag object",
                        "schema": {
                            "$ref": "#/definitions/types.Tag"
                        }
                    },
                    "400": {
                        "description": "Error parsing request body or validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/tags/{id}": {
            "get": {
                "description": "Retrieves a tag by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Get tag by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Tag"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Tag not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a tag with the given ID from the database",
                "tags": [
                    "tags"
                ],
                "summary": "Delete tag by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Tag not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a tag with the given ID in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Update tag by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Tag object to update",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Tag"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated tag object",
                        "schema": {
                            "$ref": "#/definitions/types.Tag"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or error parsing request body or validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/users": {
            "get": {
                "description": "Retrieves all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of sort fields and directions, e.g. tags",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Language code for the title (default 'en')",
                        "name": "language",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Substring to match in the full name",
                        "name": "full_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Substring to match in the job",
                        "name": "job",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of tag IDs to filter by",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Location ID to filter by",
                        "name": "location",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/users/{id}": {
            "get": {
                "description": "Retrieves a user by its id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    },
                    "400": {
                        "description": "Invalid id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a user document by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting user: \u003cerror message\u003e",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.Contacts": {
            "type": "object",
            "properties": {
                "facebook": {
                    "type": "string"
                },
                "instagram": {
                    "type": "string"
                },
                "linkedin": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "types.ContactsRequest": {
            "type": "object",
            "properties": {
                "blocked_users": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "confirmed_contacts_requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "incoming_contact_requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "outgoing_contact_requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "types.Event": {
            "type": "object",
            "required": [
                "date",
                "tags"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                },
                "cover": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "description": {
                    "$ref": "#/definitions/types.Translations"
                },
                "location": {
                    "type": "string"
                },
                "moderation_status": {
                    "$ref": "#/definitions/types.ModerationStatus"
                },
                "reason_of_reject": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "terms_of_visit": {
                    "$ref": "#/definitions/types.Translations"
                },
                "title": {
                    "$ref": "#/definitions/types.Translations"
                }
            }
        },
        "types.FileResponce": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "types.Location": {
            "type": "object",
            "required": [
                "country",
                "value"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "extra_info": {
                    "type": "string"
                },
                "house": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "settlement": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "types.ModerationStatus": {
            "type": "string",
            "enum": [
                "pending",
                "approved",
                "rejected"
            ],
            "x-enum-varnames": [
                "Pending",
                "Approved",
                "Rejected"
            ]
        },
        "types.Project": {
            "type": "object",
            "required": [
                "tags"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                },
                "applicants": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "covers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "$ref": "#/definitions/types.Translations"
                },
                "how_to_help_the_project": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "moderation_status": {
                    "$ref": "#/definitions/types.ModerationStatus"
                },
                "objective": {
                    "$ref": "#/definitions/types.Translations"
                },
                "project_status": {
                    "$ref": "#/definitions/types.ProjectStatus"
                },
                "reason_of_reject": {
                    "type": "string"
                },
                "rejected_applicants": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "slug": {
                    "type": "string"
                },
                "successful_applicants": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "$ref": "#/definitions/types.Translations"
                },
                "views": {
                    "type": "integer"
                },
                "who_is_needed": {
                    "$ref": "#/definitions/types.Translations"
                }
            }
        },
        "types.ProjectStatus": {
            "type": "string",
            "enum": [
                "ideation",
                "implementation",
                "launchAndExecution",
                "perfomanceAndControl",
                "closed"
            ],
            "x-enum-varnames": [
                "Ideation",
                "Implementation",
                "LaunchAndExecution",
                "PerfomanceAndControl",
                "Closed"
            ]
        },
        "types.RequestMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "types.Research": {
            "type": "object",
            "required": [
                "link",
                "tags"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "$ref": "#/definitions/types.Translations"
                },
                "link": {
                    "type": "string"
                },
                "moderation_status": {
                    "$ref": "#/definitions/types.ModerationStatus"
                },
                "reason_of_reject": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "$ref": "#/definitions/types.Translations"
                }
            }
        },
        "types.Role": {
            "type": "string",
            "enum": [
                "admin",
                "specialist"
            ],
            "x-enum-varnames": [
                "Admin",
                "Specialist"
            ]
        },
        "types.Statistic": {
            "type": "object",
            "required": [
                "count",
                "year",
                "year_delta"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "translations": {
                    "$ref": "#/definitions/types.Translations"
                },
                "year": {
                    "type": "integer"
                },
                "year_delta": {
                    "type": "integer"
                }
            }
        },
        "types.Suggestions": {
            "type": "object",
            "properties": {
                "suggestions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                }
            }
        },
        "types.Tag": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "title": {
                    "$ref": "#/definitions/types.Translations"
                }
            }
        },
        "types.Translations": {
            "type": "object",
            "properties": {
                "en": {
                    "type": "string"
                },
                "hy": {
                    "type": "string"
                },
                "ru": {
                    "type": "string"
                }
            }
        },
        "types.User": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                },
                "avatar": {
                    "type": "string"
                },
                "contacts": {
                    "$ref": "#/definitions/types.Contacts"
                },
                "contacts_request": {
                    "$ref": "#/definitions/types.ContactsRequest"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "events": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "first_name": {
                    "type": "string"
                },
                "job": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "notification": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "password": {
                    "type": "string"
                },
                "researches": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "role": {
                    "$ref": "#/definitions/types.Role"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_projects": {
                    "$ref": "#/definitions/types.UserProjects"
                }
            }
        },
        "types.UserBody": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "contacts": {
                    "$ref": "#/definitions/types.Contacts"
                },
                "contacts_request": {
                    "$ref": "#/definitions/types.ContactsRequest"
                },
                "description": {
                    "type": "string"
                },
                "events": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "first_name": {
                    "type": "string"
                },
                "job": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "notification": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "researches": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "role": {
                    "$ref": "#/definitions/types.Role"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_projects": {
                    "$ref": "#/definitions/types.UserProjects"
                }
            }
        },
        "types.UserProjects": {
            "type": "object",
            "properties": {
                "confirmed_applications": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "created_projects": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "projects_applications": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "rejected_applicants": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Henar",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
